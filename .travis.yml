# Travis configuration for etl-schema.
#
# The steps it takes are:
#
#  * decrypt service account credentials
#  * install the Google Cloud SDK command line tools (gcloud)
#  * cache the gcloud installation and setup
#  * deploy the bigquery views when the branch/tag matches a supported
#    deployment target.
#
# NOTE: Cloud functions only support primitive IAM roles: Owner, Editor, Viewer.
# See: https://cloud.google.com/functions/docs/concepts/iam
# TODO(soltesz): Add deployment automation when fine-grained permissions are
# possible.
language: go

go:
- '1.11'
go_import_path: github.com/m-lab/etl-schema

before_install:
- echo Branch is ${TRAVIS_BRANCH} and Tag is $TRAVIS_TAG
- go get github.com/m-lab/etl-schema/cmd/bq_create_view

# Install gcloud, for integration tests.
- $TRAVIS_BUILD_DIR/travis/install_gcloud.sh
- source "${HOME}/google-cloud-sdk/path.bash.inc"

# These directories will be cached on successful "script" builds, and restored,
# if available, to save time on future builds.
cache:
  directories:
    - "$HOME/google-cloud-sdk/"

script:
- true

#################################################################################
# Deployment Section
#
#  Overview:
#   1.  Test in sandbox during development
#   2.  Deploy to staging on commit to integration
#   3.  Deploy to prod when a branch is tagged with prod-* or xxx-prod-*
#
#  We want to test individual components in sandbox, and avoid stepping on each
#  other, so we do NOT automate deployment to sandbox.  Each person should
#  use a branch name to trigger the single deployment that they are working on.
#
#  We want to soak all code in staging before deploying to prod.  To avoid
#  incompatible components, we deploy ALL elements to staging when we merge
#  to integration branch.
#
#  Deployments to prod are done by deliberately tagging a specific commit,
#  typically in the integration branch, with a tag starting with prod-*.
#  DO NOT just tag the latest version in integration, as someone may have
#  pushed new code that hasn't had a chance to soak in staging.
#
#
# Deploy steps never trigger on a new Pull Request. Deploy steps will trigger
# on specific branch name patterns, after a merge to integration, or on
# an explicit tag that matches "on:" conditions.
#################################################################################

deploy:
######################################################################
#  Sandbox deployments
#  - before code review for development code in a specific branch.
######################################################################

- provider: script
  script:
    # Update these version numbers when making changes to the views.
    # TODO - add feature to allow making aliases from existing intermediate.
    $TRAVIS_BUILD_DIR/travis/activate_service_account.sh SERVICE_ACCOUNT_mlab_sandbox
    && cd $TRAVIS_BUILD_DIR/schema/views_standardsql
    && ./create_base_views.sh SERVICE_ACCOUNT_mlab_sandbox mlab-sandbox mlab-sandbox "ndt sidestream switch traceroute"
    && cd $TRAVIS_BUILD_DIR/schema/views_legacysql
    && ./make_views.sh mlab-sandbox intermediate_v3_1_1 rc_v3_1 "rc release"
    && cd $TRAVIS_BUILD_DIR/schema/views_standardsql
    && ./make_views.sh mlab-sandbox intermediate_v3_1_1 rc_v3_1 "rc release"
  skip_cleanup: true
  on:
    repo: m-lab/etl-schema
    all_branches: true
    condition: $TRAVIS_BRANCH == sandbox-*

######################################################################
#  Staging deployments
#  Auto deployed on merge with integration branch
#  There are no mini-deployments here.  ALL elements are redeployed
#  when merges to integration occur, and they have no other trigger.
######################################################################

- provider: script
  script:
    $TRAVIS_BUILD_DIR/travis/activate_service_account.sh SERVICE_ACCOUNT_mlab_staging
    && cd $TRAVIS_BUILD_DIR/schema/views_legacysql
    && ./make_views.sh mlab-staging intermediate_v3_1_1 rc_v3_1 "rc release"
    && cd $TRAVIS_BUILD_DIR/schema/views_standardsql
    && ./make_views.sh mlab-staging intermediate_v3_1_1 rc_v3_1 "rc release"
    && ./create_base_views.sh mlab-staging mlab-staging "ndt sidestream switch traceroute"
  skip_cleanup: true
  on:
    repo: m-lab/etl-schema
    branch: master

######################################################################
#  Prod deployments
#  Deployed on manual tagging with prod-*, or (group)-prod-*
#  Should be used AFTER code review, commit to integration, and staging soak.
#  Triggers when *ANY* branch is tagged with prod-*'
######################################################################

- provider: script
  script:
    # Update these version numbers when making changes to the views.
    # TODO - add feature to allow making aliases from existing intermediate.
    $TRAVIS_BUILD_DIR/travis/activate_service_account.sh SERVICE_ACCOUNT_mlab_oti
    && cd $TRAVIS_BUILD_DIR/schema/views_legacysql
    && ./make_views.sh measurement-lab intermediate_v3_1_1 rc_v3_1 "rc release"
    && cd $TRAVIS_BUILD_DIR/schema/views_standardsql
    && ./make_views.sh measurement-lab intermediate_v3_1_1 rc_v3_1 "rc release"
    && ./create_base_views.sh mlab-oti mlab-oti "ndt sidestream switch traceroute"
    && ./create_base_views.sh mlab-oti measurement-lab "ndt sidestream switch traceroute"
  skip_cleanup: true
  on:
    repo: m-lab/etl-schema
    all_branches: true
    condition: $TRAVIS_TAG == prod-*
